"""
Ukrainian food price application
Designer: Matthew Burton 
Begin Date: 01/08/2022
End Date: N/A

This is my application for NMIT Semester 2 of 2022, SDV602 class tutored by Todd Cochrane. 
The intention of this application is to track the prices of food in the war torn country of the Ukraine. I do not personally agree with any form of war, I am just studying the effects
on the people in different areas of the Ukraine that are affected by the war. 

This application may take a dataset of any country and produce results to be displayed graphically on the prices of items, in the future I aim to make this application have the ability 
to adapt to different countries and different options datasets allow. 

This application's current state is a test state, having completed the skeleton and inserted test data to display on a graph inside of a GUI, in future it will work with a dataset 
provided to display actual food price records and a secondary dataset to convert currencies accurately

The application uses the libraries:
    - PySimpleGUI   (For layout and presentation of windows in graphical user interface)
    - Matplotlib    (For layout of graphs to insert into the windows generated by PySimpleGUI)
    - Tkinter       (To generate message boxes to display errors or unexpected results)

Enjoy! 
"""
import Common
import Model 
import View 

# Set the theme for the application 
Common.sg.theme(Common.theme)

# Some test data accessed from the model class 
years = Model.years
prices = Model.prices

def create_window():
    """
    Function for creating a screen based on the value of the 'window_flag' variable and the layout generated from 'generate_layout'
    """
    # First generate the object of the layout 
    layout = Model.generate_layout()

    if window_flag == 0:
        # Center justify content, return the login screen 
        return sg.Window("Login", layout, element_justification='c')
    elif window_flag == 1:
        # Close any last screen populated and generate a new main screen 
        window.close()
        return sg.Window("Main", layout, size=(900,500), finalize=True)     
    elif window_flag == 2:
        # Generate the map screen 
        return sg.Window("Map", layout)

def create_plot(x, y, flag):
    """
    Function to plot graph values, switch between types of graph to be plotted 
    """
    # Dispose any past graphs that were plotted 
    plt.cla()

    # State machine to switch between bar graph plotting and line graph plotting 
    if flag == 0:
        plt.plot(x, y, color="blue", marker="o")
    elif flag == 1: 
        plt.bar(x,y,color="green")
        plt.plot()

    plt.title("Food prices")
    plt.xlabel("Year")
    plt.ylabel("Price ($)")
    plt.grid(True)
    return plt.gcf()

def draw_graph(canvas, figure):
    """
    Function to draw a graph 
    """
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas)
    figure_canvas_agg.draw()
    figure_canvas_agg.get_tk_widget().pack(side="top", fill="both", expand=1)
    return figure_canvas_agg

# Set some initial conditions 
graph_flag = 0
window_flag = 0 
window = create_window()

if __name__ == "__main__":

    # Application's main event loop 
    while True:
        event, values = window.read()
        # For any state the machine is in, if the window is closed, exit the application entirely
        if event == sg.WIN_CLOSED:
            break
        # The system is in the login screen state, showing the first screen      
        if window_flag == 0:
            if event == "Exit":
                break
            if event == "Login":
                # check credentials, close last window, open the main screen
                window_flag = 1 
                window = create_window()
                draw_graph(window["-CANVAS-"].TKCanvas, create_plot(years, prices, graph_flag))
        # The system is in the main screen state, showing the secondarily generated screen  
        elif window_flag == 1:
            if event == "Change graph":
                # Switch the value of the graph that is plotted 
                if graph_flag == 0:
                    graph_flag = 1
                elif graph_flag == 1:
                    graph_flag = 0

                window = create_window()
                draw_graph(window["-CANVAS-"].TKCanvas, create_plot(years, prices, graph_flag))

            if event == "Display region":
                # Show map screen 
                # Keep the main screen open but not interactive 
                window_flag = 2
                window = create_window()
        # The system is in the map screen state, showing the thirdly generated screen  
        elif window_flag == 2:
            if event == "Exit to main" or event == sg.WIN_CLOSED():
                # Show the main screen
                window_flag = 1
                window = create_window()
                draw_graph(window["-CANVAS-"].TKCanvas, create_plot(years, prices, graph_flag))

    # Default state once conditions satisfied 
    window.close() 
